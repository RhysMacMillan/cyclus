name: Build and Test Dependency Images

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/build_test_publish.yml'
      - 'docker/**'
  push:
    branches:
      - main

jobs:
  build-dependency-img:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ubuntu_versions : [
          20.04,
          22.04,
        ]
        pkg_mgr : [
          apt,
          conda,
        ]

    name: Building Dependency Image
    steps:
      - name: default environment
        run: |
          echo "tag=${{ github.run_id }}" >> "$GITHUB_ENV"

      - name: condition on trigger parameters
        if: ${{ github.repository_owner == 'cyclus' && github.ref == 'refs/heads/main' }}
        run: |
          echo "tag=latest" >> "$GITHUB_ENV"

      - name: Build Dependency Image
        uses: bennibbelink/cyclus-ci-action@main
        with:
          repository: cyclus/cyclus
          docker-build-target: ${{ matrix.pkg_mgr }}-deps
          artifact-out-name: cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}-deps
          artifact-out-tags: |
            ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/${{ matrix.pkg_mgr }}-deps:${{ env.tag }}
          dockerfile-path: docker/Dockerfile
          docker-build-args: |
            pkg_mgr=${{ matrix.pkg_mgr }}
            ubuntu_version=${{ matrix.ubuntu_versions }}

  build-cyclus-img:
    runs-on: ubuntu-latest
    needs: build-dependency-img

    strategy:
      matrix:
        ubuntu_versions : [
          20.04,
          22.04,
        ]
        pkg_mgr : [
          apt,
          conda,
        ]

    name: Building Cyclus
    steps:
      - name: default environment
        run: |
          echo "tag=${{ github.run_id }}" >> "$GITHUB_ENV"

      - name: condition on trigger parameters
        if: ${{ github.repository_owner == 'cyclus' && github.ref == 'refs/heads/main' }}
        run: |
          echo "tag=latest" >> "$GITHUB_ENV"

      - name: Build Cyclus Image
        uses: bennibbelink/cyclus-ci-action@main
        with:
          repository: cyclus/cyclus
          docker-build-target: cyclus-pytest
          push-image: ${{ github.event_name == 'push'}} # push new cyclus image only on push to main
          artifact-in-name: cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}-deps
          artifact-out-tags: |
            ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/${{ matrix.pkg_mgr }}:${{ env.tag }}
          dockerfile-path: docker/Dockerfile
          docker-build-args: |
            pkg_mgr=${{ matrix.pkg_mgr }}
            ubuntu_version=${{ matrix.ubuntu_versions }}

  push-deps-img:
    runs-on: ubuntu-latest
    needs: [build-dependency-img, build-cyclus-img]

    strategy:
      matrix:
        ubuntu_versions : [
          20.04,
          22.04,
        ]
        pkg_mgr : [
          apt,
          conda,
        ]

    name: Push Dependency Image
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Dependency Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}-deps
          path: /tmp

      - name: Load Dependency Image
        run: |
          docker load --input /tmp/cyclus-${{ matrix.ubuntu_versions }}-${{ matrix.pkg_mgr }}-deps.tar

      - name: Push Dependency Image
        run: |
          docker push -a ghcr.io/cyclus/cyclus_${{ matrix.ubuntu_versions }}_${{ matrix.pkg_mgr }}/${{ matrix.pkg_mgr }}-deps


  